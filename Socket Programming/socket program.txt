#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <netinet/in.h>


#define POR 8080
#define BUFFER_SIZE 1024

int main(){

int server_fd, client_fd;
        struct sockaddr_in server_addr, client_addr;
        socklen_t addrlen = sizeof(client_addr);
        char read_buffer[BUFFER_SIZE]= {0};
        const char* message="Hello from Server!";

       
       int server_fd= socket(AF_INET,SOCK_STREAM,0);

       if(fd<0) error;
       
       int opt =1;
       if(setsockopt(server_fd,SOL_SOCCKET, SO_REUSEADDR|SO_RESUEPORT,&opt,sizeof(opt))<0){
          perror();
       }
       
      server_addr.sin_family= AF_INET;
      server_addr.sin_addr.s_addr= INADDR_ANY;
      server_addr.sin_port= htons(PORT);
     
      bind(server_fd, (struct sockaddr*)&server_addr, sizeof(server_addr));
     
      listen(server_fd, 5);
     
      client_fd= accept(server_fd,(struct sockaddr*)&client_addr,&addrlen);

      read(client_fd,read_buffer,BUFFER_SIZE );
   
      send(client_fd, message,strlen(message),0);
     
     close(client_fd);
     close(server_fd);
 
}


client.cc
===

int myfd;
struct sockaddr_in server_addr;
char* message = "Hello from client!";
myfd=socket(AF_INET,SOCK_STREAM,0);

server_addr.sin_family=AF_INET;
server_addr.sin_port=htons(PORT);

inet_pton(AF_INET,"127.0.0.1", &server_addr.sin_addr);
connect(server_fd,(struct sockaddr*)&server_addr,sizeof(server_addr));

send (