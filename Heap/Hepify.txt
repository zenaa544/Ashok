###############################################
void buildMaxHeap(int arr[], int n) {
    // Start from last non-leaf node
    for (int i = n / 2 - 1; i >= 0; i--) {
        maxHeapify(arr, n, i);
    }
}

#include <iostream>
using namespace std;

void maxHeapify(int arr[], int n, int i) {
    int largest = i;      // Assume root is largest
    int left = 2 * i + 1; // Left child
    int right = 2 * i + 2;// Right child

    // Compare with left child
    if (left < n && arr[left] > arr[largest])
        largest = left;

    // Compare with right child
    if (right < n && arr[right] > arr[largest])
        largest = right;

    // If largest is not root, swap and heapify
    if (largest != i) {
        swap(arr[i], arr[largest]);
        maxHeapify(arr, n, largest);
    }
}

##################################################################

void buildMinHeap(int arr[], int n) {
    // Start from last non-leaf node
    for (int i = n / 2 - 1; i >= 0; i--) {
        minHeapify(arr, n, i);
    }
}

void minHeapify(int arr[], int n, int i) {
    int smallest = i;      // Assume root is smallest
    int left = 2 * i + 1;  // Left child
    int right = 2 * i + 2; // Right child

    // Compare with left child
    if (left < n && arr[left] < arr[smallest])
        smallest = left;

    // Compare with right child
    if (right < n && arr[right] < arr[smallest])
        smallest = right;

    // If smallest is not root, swap and heapify
    if (smallest != i) {
        swap(arr[i], arr[smallest]);
        minHeapify(arr, n, smallest);
    }
}
